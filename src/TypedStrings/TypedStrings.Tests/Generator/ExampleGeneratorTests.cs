// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.PowerPlatform.TypedStrings.Generated;

namespace Microsoft.PowerPlatform.TypedStrings.Generator;

[TestClass]
public class ExampleGeneratorTests
{
    // Comment / Uncomment the attribute to trigger the source generator.  Works a good 50% of the time,
    // with the rest of the times somehow having a cached version of the previous code generation.
    [TypedString]
    public partial record TypedStringTest
    {
        // Work In Progress - attempting to declare the implementation here, with a partial method on the autogenerated side to reference it.
        // public static partial bool IsValid([NotNullWhen(true)] string? value) => !string.IsNullOrEmpty(value);
    }

    [TestMethod]
    public void DebuggingSourceGeneratorTest()
    {
        // This is not a "test" per se, but rather a way to programmatically execute the source generator,
        // so that breakpoints set in it can be executed.

        var generator = Activator.CreateInstance<ExampleSourceGenerator>();

        CSharpGeneratorDriver
            .Create(generator)
            .RunGenerators(
                CSharpCompilation.Create("test", new[] { CSharpSyntaxTree.ParseText("namespace foo.bar { [Microsoft.PowerPlatform.TypedStrings.Generated.TypedString] public partial record TypedStringTest; }") }));

    }
}
