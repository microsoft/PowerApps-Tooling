// <auto-generated />
#nullable enable

using global::System.Diagnostics.CodeAnalysis;
using global::System.Diagnostics;
using global::System.Runtime.CompilerServices;

namespace Microsoft.PowerPlatform.TypedStrings.Generator
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.PowerPlatform.TypedStrings.Generator", "1.0.0.0")]
    [DebuggerDisplay("{GetDebuggerDisplay}")]
    [SuppressMessage("Design", "CA1036:Override methods on comparable types", Justification = "TODO")] // Remove this suppression and implement using latest recommended performant implementation.
    public partial record TypedStringTestDefaultIsValid : global::Microsoft.PowerPlatform.TypedStrings.ITypedString<TypedStringTestDefaultIsValid>
    {
        public TypedStringTestDefaultIsValid(string value)
        {
            Value = ValidateArgument(value);
        }

        public string Value { get; }

        public static implicit operator string(TypedStringTestDefaultIsValid name) => name.Value;

        // Default implementation of IsValid will simply verify the value is not null.
// You may implement your own method as long as it's static, and has the same argument signature.
// You should be able to override the access modifier as needed for your usage.
private static bool IsValid([NotNullWhen(true)] string? value) => value != null;

        public override string ToString() => Value;

        public int CompareTo(TypedStringTestDefaultIsValid? other) => Value.CompareTo(other?.Value);

        private string GetDebuggerDisplay => $"{nameof(TypedStringTestDefaultIsValid)} {{ Value = {Value} }}";

        private static string ValidateArgument([NotNull] string? value, [CallerArgumentExpression(nameof(value))] string? argumentName = null)
        {
            if (!TryValidate(value, out var validated))
            {
                throw new ArgumentException($"Invalid value for a {nameof(TypedStringTestDefaultIsValid)}.", argumentName);
            }
            return validated;
        }

        /// <summary>
        /// Validates the input value and returns a validated string.
        /// </summary>
        private static bool TryValidate([NotNullWhen(true)] string? value, [NotNullWhen(true)] out string? validated)
        {
            if (IsValid(value))
            {
                global::System.Diagnostics.Debug.Assert(value != null); // Verify `IsValid` is "well behaved".

                validated = value;
                return true;
            }

            validated = null;
            return false;
        }

        public static TypedStringTestDefaultIsValid Parse(string value, IFormatProvider? provider)
        {
            _ = value ?? throw new ArgumentNullException(nameof(value));

            if (!TryParse(value, provider, out var parsed))
            {
                throw new FormatException($"Invalid string format for a TypedStringTestDefaultIsValid.");
            }

            return parsed;
        }

        public static bool TryParse(string? value, IFormatProvider? provider, [NotNullWhen(true)] out TypedStringTestDefaultIsValid? result)
        {
            if (!TryValidate(value, out var validated))
            {
                result = default;
                return false;
            }

            result = new(value);
            return true;
        }
    }
}